// ask index to get a node
START n=node:geoIndex(name = "Corippo")
RETURN n

// a simple match
START n=node:peopleIndex('first_name: Alba AND last_name: Scherer')
MATCH n-[:LIVES_IN]->p
RETURN p

// with clause
START n=node:peopleIndex('first_name: Alba AND last_name: Scherer')
MATCH n-[:LIVES_IN]->()-[:IS_IN]->district 
WITH district
MATCH district<-[:IS_IN]-(city)
RETURN city

// variable length relationships
START a=node:peopleIndex('first_name: Alba AND last_name: Scherer')
MATCH (a)-[r:FRIEND_OF*1..2]->(b)
RETURN length(r), b
LIMIT 1000

// paths
START m=node:peopleIndex('first_name: Alba AND last_name: Scherer'), g=node:peopleIndex('first_name: Célia AND last_name: Kutter')
MATCH p = shortestPath((m)-[*]-(g))
RETURN p

START m=node:peopleIndex('first_name: Alba AND last_name: Scherer'), g=node:peopleIndex('first_name: Célia AND last_name: Kutter')
MATCH p = allShortestPaths((m)-[*]-(g))
RETURN p
LIMIT 5

START m=node:peopleIndex('first_name: Alba AND last_name: Scherer'), g=node:peopleIndex('first_name: Célia AND last_name: Kutter')
MATCH p = shortestPath((m)-[:LIVES_IN|IS_IN]-(g))
RETURN p

// other examples
START n=node:peopleIndex('first_name: Alba AND last_name: Scherer')
MATCH n-[:LIVES_IN]->()-[:IS_IN]->()-[:IS_IN]->canton
WITH n, canton
MATCH canton<-[:IS_IN]-(district)<-[:IS_IN]-(city)<-[:LIVES_IN]-friend-[:FRIEND_OF]->n
RETURN n, friend, canton, district, city

START p=node:peopleIndex('first_name: Alba AND last_name:Scherer'), i=node:activityIndex('name: Cooking')
MATCH (p)-[:LIVES_IN]->(a)-[:IS_IN]->(b)
MATCH f = AllshortestPaths(b-[*]-i)
RETURN f
LIMIT 20

